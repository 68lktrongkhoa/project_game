import { BookService } from '../services/book.service';
import { UserService } from '../services/user.service';
import { BorrowingService } from '../services/borrowing.service';
import { BorrowStatus } from '../models/borrowRecord';
import { getStringInput, getNumericInput } from './prompt.utils';

export function handleDisplayAllBooks(bookService: BookService): void {
  console.log("\nüìö T·∫•t c·∫£ S√°ch:");
  const allBooks = bookService.getAllBooks();
  bookService.displayBooks(allBooks);
}

export function handleDisplayAllUsers(userService: UserService): void {
  console.log("\nüë§ T·∫•t c·∫£ Ng∆∞·ªùi d√πng:");
  const allUsers = userService.getAllUsers();
  userService.displayUsers(allUsers);
}

export function handleSearchBooks(bookService: BookService): void {
  const keyword = getStringInput("üîç Nh·∫≠p t·ª´ kh√≥a t√¨m ki·∫øm (ti√™u ƒë·ªÅ, t√°c gi·∫£, ISBN, th·ªÉ lo·∫°i): ");
  if (!keyword) {
    console.warn("‚ö†Ô∏è T·ª´ kh√≥a t√¨m ki·∫øm kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.");
    return;
  }
  const foundBooks = bookService.searchBooks(keyword);
  if (foundBooks.length > 0) {
    console.log("\nüîé K·∫øt qu·∫£ T√¨m ki·∫øm:");
    bookService.displayBooks(foundBooks);
  } else {
    console.log("‚ùå Kh√¥ng t√¨m th·∫•y s√°ch n√†o kh·ªõp v·ªõi t·ª´ kh√≥a c·ªßa b·∫°n.");
  }
}

export function handleBorrowBook(
  borrowingService: BorrowingService,
  userService: UserService,
  bookService: BookService
): void {
  const memberIdBorrow = getStringInput("üë§ Nh·∫≠p Member ID c·ªßa Ng∆∞·ªùi d√πng ƒë·ªÉ m∆∞·ª£n: ");
  if (!memberIdBorrow) {
    console.warn("‚ö†Ô∏è Member ID kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.");
    return;
  }
  const userToBorrow = userService.getUserById(memberIdBorrow);
  if (!userToBorrow) {
    console.log(`‚ùå Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi Member ID: ${memberIdBorrow}`);
    return;
  }

  const bookIdBorrow = getNumericInput("üìï Nh·∫≠p ID S√°ch ƒë·ªÉ m∆∞·ª£n: ");
  if (bookIdBorrow === null) return;

  const bookToBorrow = bookService.getBookById(bookIdBorrow);
  if (!bookToBorrow) {
    console.log(`‚ùå Kh√¥ng t√¨m th·∫•y s√°ch v·ªõi ID: ${bookIdBorrow}`);
    return;
  }

  if (!bookToBorrow.available || (bookToBorrow.totalCopies !== undefined && bookToBorrow.totalCopies <= 0)) {
      console.log(`‚ùå S√°ch "${bookToBorrow.title}" hi·ªán kh√¥ng c√≥ s·∫µn ho·∫∑c ƒë√£ h·∫øt b·∫£n sao ƒë·ªÉ m∆∞·ª£n.`);
      return;
  }

  borrowingService.borrowBook(userToBorrow.id, bookToBorrow.id);
}

export function handleReturnBook(borrowingService: BorrowingService): void {
  const recordIdReturn = getNumericInput("üìÑ Nh·∫≠p ID B·∫£n ghi M∆∞·ª£n ƒë·ªÉ tr·∫£: ");
  if (recordIdReturn === null) return;
  borrowingService.returnBook(recordIdReturn);
}

export function handleDisplayAllBorrowingHistory(borrowingService: BorrowingService): void {
  console.log("\nüìÑ T·∫•t c·∫£ L·ªãch s·ª≠ M∆∞·ª£n:");
  const allRecords = borrowingService.getBorrowingHistory();
  borrowingService.displayBorrowingHistory(allRecords);
}

export function handleDisplayActiveBorrowingHistory(borrowingService: BorrowingService): void {
  console.log("\n‚è≥ L·ªãch s·ª≠ M∆∞·ª£n Hi·ªán t·∫°i (ƒêang m∆∞·ª£n/Qu√° h·∫°n):");
  const activeRecords = borrowingService.getBorrowingHistory().filter(
    r => r.status === BorrowStatus.BORROWED || r.status === BorrowStatus.OVERDUE
  );
  borrowingService.displayBorrowingHistory(activeRecords);
}