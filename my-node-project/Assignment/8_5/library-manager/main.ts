import readlineSync from 'readline-sync';
import { Repository } from './src/repository/repository';
import { BorrowRecord } from './src/models/borrowRecord';
import { Book } from './src/models/book';
import { User } from './src/models/user';
import { BookService } from './src/services/book.service';
import { UserService } from './src/services/user.service';
import { BorrowingService } from './src/services/borrowing.service';
import { loadInitialData } from './src/core/seeder';
import {
  handleDisplayAllBooks,
  handleDisplayAllUsers,
  handleSearchBooks,
  handleBorrowBook,
  handleReturnBook,
  handleDisplayAllBorrowingHistory,
  handleDisplayActiveBorrowingHistory,
} from './src/core/menu.actions';

function main(): void {
  const bookRepository = new Repository<Book>();
  const userRepository = new Repository<User>();
  const borrowRecordRepository = new Repository<BorrowRecord>();

  const bookServiceInstance = new BookService(bookRepository);
  const userServiceInstance = new UserService(userRepository);
  const borrowingServiceInstance = new BorrowingService(
    borrowRecordRepository,
    bookServiceInstance,
    userServiceInstance
  );

  loadInitialData(bookServiceInstance, userServiceInstance);
  interactiveMenu(bookServiceInstance, userServiceInstance, borrowingServiceInstance);
}

interface MenuItem {
  description: string;
  handler: () => void | boolean;
}

function interactiveMenu(
  bookService: BookService,
  userService: UserService,
  borrowingService: BorrowingService
): void {
  console.log("\nüß≠ H·ªÜ TH·ªêNG QU·∫¢N L√ù TH∆Ø VI·ªÜN!");

  const menuOptions: Record<string, MenuItem> = {
    "1": { description: "üìö Hi·ªÉn th·ªã T·∫•t c·∫£ S√°ch", handler: () => handleDisplayAllBooks(bookService) },
    "2": { description: "üë§ Hi·ªÉn th·ªã T·∫•t c·∫£ Ng∆∞·ªùi d√πng", handler: () => handleDisplayAllUsers(userService) },
    "3": { description: "üîé T√¨m ki·∫øm S√°ch", handler: () => handleSearchBooks(bookService) },
    "4": { description: "‚ûï M∆∞·ª£n S√°ch", handler: () => handleBorrowBook(borrowingService, userService, bookService) },
    "5": { description: "üîÑ Tr·∫£ S√°ch", handler: () => handleReturnBook(borrowingService) },
    "6": { description: "üìÑ Hi·ªÉn th·ªã L·ªãch s·ª≠ M∆∞·ª£n (T·∫•t c·∫£)", handler: () => handleDisplayAllBorrowingHistory(borrowingService) },
    "7": { description: "‚è≥ Hi·ªÉn th·ªã L·ªãch s·ª≠ M∆∞·ª£n (ƒêang m∆∞·ª£n/Qu√° h·∫°n)", handler: () => handleDisplayActiveBorrowingHistory(borrowingService) },
    "8": {
      description: "üö™ Tho√°t",
      handler: () => {
        console.log("\nüëã T·∫°m bi·ªát!");
        return true;
      },
    },
  };

  let running = true;
  while (running) {
    for (const key in menuOptions) {
      const desc = menuOptions[key].description.padEnd(35, ' ');
      console.log(`${key}. ${desc} `);
    }

    const option = readlineSync.question("  ‚ñ∂Ô∏è  Ch·ªçn m·ªôt t√πy ch·ªçn: ").trim();
    const selectedMenuOption = menuOptions[option];

    if (selectedMenuOption) {
      const result = selectedMenuOption.handler();
      if (result === true) {
        running = false;
      }
    } else {
      console.log("  ‚ö†Ô∏è  L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá. Vui l√≤ng th·ª≠ l·∫°i.");
    }

    if (running) {
      readlineSync.keyInPause("\n  Nh·∫•n ph√≠m 0 ƒë·ªÉ ti·∫øp t·ª•c...");
    }
  }
}
main();