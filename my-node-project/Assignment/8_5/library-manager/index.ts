import readlineSync from 'readline-sync';
import { Repository } from './src/repository/repository';
import { BorrowRecord, BorrowStatus } from './src/models/borrowRecord'; 
import { Book, GenreValues, BookGenre } from './src/models/book';
import { User } from './src/models/user'; 
import { BookService } from './src/services/book.service';
import { UserService } from './src/services/user.service';
import { BorrowingService } from './src/services/borrowing.service';
import fs from 'fs';
import path from 'path';


const bookRepository = new Repository<Book>();
const userRepository = new Repository<User>();
const borrowRecordRepository = new Repository<BorrowRecord>();

const bookService = new BookService(bookRepository);
const userService = new UserService(userRepository);
const borrowingService = new BorrowingService(borrowRecordRepository, bookService, userService);


function loadInitialData() {
  try {
    console.log("--- Adding initial books from JSON ---");
    const booksFilePath = path.join(__dirname, 'initial-books.json');
    const booksRawData = fs.readFileSync(booksFilePath, 'utf-8');
    const booksData: Omit<Book, 'id'>[] = JSON.parse(booksRawData);
    booksData.forEach(bookData => {
        bookService.addBook(bookData as Omit<Book, 'id'> & { genre?: BookGenre });
    });

    console.log("\n--- Adding initial users from JSON ---");
    const usersFilePath = path.join(__dirname, 'initial-users.json');
    const usersRawData = fs.readFileSync(usersFilePath, 'utf-8');
    const usersData: Omit<User, 'id'>[] = JSON.parse(usersRawData);
    usersData.forEach(userData => userService.addUser(userData));

  } catch (error) {
    console.error("L·ªói khi t·∫£i d·ªØ li·ªáu kh·ªüi t·∫°o:", error);
  }
}

loadInitialData();

function interactiveMenu() {
  console.log("\nüß≠ H·ªá th·ªëng Th∆∞ vi·ªán - Ch·∫ø ƒë·ªô T∆∞∆°ng t√°c");
  while (true) {
    const option = readlineSync.question(`
  -------------------------------------
  Ch·ªçn m·ªôt t√πy ch·ªçn:
  1. üìö Hi·ªÉn th·ªã T·∫•t c·∫£ S√°ch
  2. üë§ Hi·ªÉn th·ªã T·∫•t c·∫£ Ng∆∞·ªùi d√πng
  3. üîé T√¨m ki·∫øm S√°ch (theo ti√™u ƒë·ªÅ, t√°c gi·∫£, ISBN, th·ªÉ lo·∫°i)
  4. ‚ûï M∆∞·ª£n S√°ch
  5. üîÑ Tr·∫£ S√°ch
  6. üìÑ Hi·ªÉn th·ªã L·ªãch s·ª≠ M∆∞·ª£n (T·∫•t c·∫£)
  7. ‚è≥ Hi·ªÉn th·ªã L·ªãch s·ª≠ M∆∞·ª£n (ƒêang m∆∞·ª£n/Qu√° h·∫°n)
  8. üö™ Tho√°t
  -------------------------------------
  > `);

    switch (option) {
      case "1":
        console.log("\nüìö T·∫•t c·∫£ S√°ch:");
        const allBooks = bookService.getAllBooks();
        bookService.displayBooks(allBooks);
        break;

     case "2":
         console.log("\nüë§ T·∫•t c·∫£ Ng∆∞·ªùi d√πng:");
         const allUsers = userService.getAllUsers();
         userService.displayUsers(allUsers); 
         break;

      case "3":
        const keyword = readlineSync.question("üîç Nh·∫≠p t·ª´ kh√≥a t√¨m ki·∫øm: ");
        const foundBooks = bookService.searchBooks(keyword);
        if (foundBooks.length) {
            console.log("\nüîé K·∫øt qu·∫£ T√¨m ki·∫øm:");
            bookService.displayBooks(foundBooks);
        } else {
          console.log("‚ùå Kh√¥ng t√¨m th·∫•y s√°ch n√†o kh·ªõp v·ªõi t·ª´ kh√≥a c·ªßa b·∫°n.");
        }
        break;

      case "4":
        const memberIdBorrow = readlineSync.question("üë§ Nh·∫≠p Member ID c·ªßa Ng∆∞·ªùi d√πng ƒë·ªÉ m∆∞·ª£n: ");
        const userToBorrow = userService.findUserById(memberIdBorrow);
        if (!userToBorrow) {
            console.log(`‚ùå Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi Member ID: ${memberIdBorrow}`);
            break;
        }

        const bookIdBorrowInput = readlineSync.question("üìï Nh·∫≠p ID S√°ch ƒë·ªÉ m∆∞·ª£n: ");
        const bookIdBorrow = parseInt(bookIdBorrowInput, 10);
        if (isNaN(bookIdBorrow)) {
            console.log("‚ùå ID s√°ch kh√¥ng h·ª£p l·ªá.");
            break;
        }
        const bookToBorrow = bookService.findBookById(bookIdBorrow);
        if (!bookToBorrow) {
            console.log(`‚ùå Kh√¥ng t√¨m th·∫•y s√°ch v·ªõi ID: ${bookIdBorrow}`);
            break;
        }

        borrowingService.borrowBook(userToBorrow.id, bookToBorrow.id);
        break;

      case "5":
        const recordIdReturnInput = readlineSync.question("üìÑ Nh·∫≠p ID B·∫£n ghi M∆∞·ª£n ƒë·ªÉ tr·∫£: ");
        const recordIdReturn = parseInt(recordIdReturnInput, 10);
        if (isNaN(recordIdReturn)) {
            console.log("‚ùå ID b·∫£n ghi m∆∞·ª£n kh√¥ng h·ª£p l·ªá.");
            break;
        }
        borrowingService.returnBook(recordIdReturn);
        break;

      case "6":
        console.log("\nüìÑ T·∫•t c·∫£ L·ªãch s·ª≠ M∆∞·ª£n:");
        const allRecords = borrowingService.getBorrowingHistory();
        borrowingService.displayBorrowingHistory(allRecords);
        break;

      case "7":
          console.log("\n‚è≥ L·ªãch s·ª≠ M∆∞·ª£n Hi·ªán t·∫°i (ƒêang m∆∞·ª£n/Qu√° h·∫°n):");
          const activeRecords = borrowingService.getBorrowingHistory().filter(
              r => r.status === BorrowStatus.BORROWED || r.status === BorrowStatus.OVERDUE
          );
          borrowingService.displayBorrowingHistory(activeRecords); 
          break;

      case "8":
        console.log("üëã T·∫°m bi·ªát! Ch√∫c b·∫°n ƒë·ªçc s√°ch vui v·∫ª!");
        return;

      default:
        console.log("‚ö†Ô∏è T√πy ch·ªçn kh√¥ng h·ª£p l·ªá. Vui l√≤ng th·ª≠ l·∫°i.");
    }
    readlineSync.keyInPause("\nNh·∫•n ph√≠m b·∫•t k·ª≥ ƒë·ªÉ ti·∫øp t·ª•c...");
  }
}

interactiveMenu();