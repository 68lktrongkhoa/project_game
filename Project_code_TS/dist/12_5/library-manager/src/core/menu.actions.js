"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handleDisplayAllBooks = handleDisplayAllBooks;
exports.handleDisplayAllUsers = handleDisplayAllUsers;
exports.handleSearchBooks = handleSearchBooks;
exports.handleBorrowBook = handleBorrowBook;
exports.handleReturnBook = handleReturnBook;
exports.handleDisplayAllBorrowingHistory = handleDisplayAllBorrowingHistory;
exports.handleDisplayActiveBorrowingHistory = handleDisplayActiveBorrowingHistory;
const borrowRecord_1 = require("../models/borrowRecord");
const prompt_utils_1 = require("./prompt.utils");
function handleDisplayAllBooks(bookService) {
    console.log("\nüìö T·∫•t c·∫£ S√°ch:");
    const allBooks = bookService.getAllBooks();
    bookService.displayBooks(allBooks);
}
function handleDisplayAllUsers(userService) {
    console.log("\nüë§ T·∫•t c·∫£ Ng∆∞·ªùi d√πng:");
    const allUsers = userService.getAllUsers();
    userService.displayUsers(allUsers);
}
function handleSearchBooks(bookService) {
    const keyword = (0, prompt_utils_1.getStringInput)("üîç Nh·∫≠p t·ª´ kh√≥a t√¨m ki·∫øm (ti√™u ƒë·ªÅ, t√°c gi·∫£, ISBN, th·ªÉ lo·∫°i): ");
    if (!keyword) {
        console.warn("‚ö†Ô∏è T·ª´ kh√≥a t√¨m ki·∫øm kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.");
        return;
    }
    const foundBooks = bookService.searchBooks(keyword);
    if (foundBooks.length > 0) {
        console.log("\nüîé K·∫øt qu·∫£ T√¨m ki·∫øm:");
        bookService.displayBooks(foundBooks);
    }
    else {
        console.log("‚ùå Kh√¥ng t√¨m th·∫•y s√°ch n√†o kh·ªõp v·ªõi t·ª´ kh√≥a c·ªßa b·∫°n.");
    }
}
function handleBorrowBook(borrowingService, userService, bookService) {
    const memberIdBorrow = (0, prompt_utils_1.getStringInput)("üë§ Nh·∫≠p Member ID c·ªßa Ng∆∞·ªùi d√πng ƒë·ªÉ m∆∞·ª£n: ");
    if (!memberIdBorrow) {
        console.warn("‚ö†Ô∏è Member ID kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.");
        return;
    }
    const userToBorrow = userService.getUserById(memberIdBorrow);
    if (!userToBorrow) {
        console.log(`‚ùå Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi Member ID: ${memberIdBorrow}`);
        return;
    }
    const bookIdBorrow = (0, prompt_utils_1.getNumericInput)("üìï Nh·∫≠p ID S√°ch ƒë·ªÉ m∆∞·ª£n: ");
    if (bookIdBorrow === null)
        return;
    const bookToBorrow = bookService.getBookById(bookIdBorrow);
    if (!bookToBorrow) {
        console.log(`‚ùå Kh√¥ng t√¨m th·∫•y s√°ch v·ªõi ID: ${bookIdBorrow}`);
        return;
    }
    if (!bookToBorrow.available || (bookToBorrow.totalCopies !== undefined && bookToBorrow.totalCopies <= 0)) {
        console.log(`‚ùå S√°ch "${bookToBorrow.title}" hi·ªán kh√¥ng c√≥ s·∫µn ho·∫∑c ƒë√£ h·∫øt b·∫£n sao ƒë·ªÉ m∆∞·ª£n.`);
        return;
    }
    borrowingService.borrowBook(userToBorrow.id, bookToBorrow.id);
}
function handleReturnBook(borrowingService) {
    const recordIdReturn = (0, prompt_utils_1.getNumericInput)("üìÑ Nh·∫≠p ID B·∫£n ghi M∆∞·ª£n ƒë·ªÉ tr·∫£: ");
    if (recordIdReturn === null)
        return;
    borrowingService.returnBook(recordIdReturn);
}
function handleDisplayAllBorrowingHistory(borrowingService) {
    console.log("\nüìÑ T·∫•t c·∫£ L·ªãch s·ª≠ M∆∞·ª£n:");
    const allRecords = borrowingService.getBorrowingHistory();
    borrowingService.displayBorrowingHistory(allRecords);
}
function handleDisplayActiveBorrowingHistory(borrowingService) {
    console.log("\n‚è≥ L·ªãch s·ª≠ M∆∞·ª£n Hi·ªán t·∫°i (ƒêang m∆∞·ª£n/Qu√° h·∫°n):");
    const activeRecords = borrowingService.getBorrowingHistory().filter(r => r.status === borrowRecord_1.BorrowStatus.BORROWED || r.status === borrowRecord_1.BorrowStatus.OVERDUE);
    borrowingService.displayBorrowingHistory(activeRecords);
}
